use mod base.*;
use mod base.init.*;

use mod message;

!bind[](
	bind[](
		return[](10),
		(a: int) => return[](a * 5)),
	(a: int) -> Init[Unit]
		=> printIntTwice(a));

printIntTwice := (val: int) -> Init[Unit]
	=> init.bind[](printInt(val),
		(a: Unit) => printInt(val));

!printLn(match Maybe[int].Some(3) {
	Maybe[int].Some(2)  => "two";
	Maybe[int].Some($a) => "something else";
	Maybe[int].None     => "nothing";
});

!message.msg[](message.onStart, a =>
	message.bind[](message.return[](2),
		b => message.io[](io.printInt(b))));

# !msg(message.onStart, do {
# 	a := Pass(2);
# });

# !onStart >> _ => Pass(2) >>= a => io(printInt(a));
