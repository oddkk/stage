# mod channel;
mod message;
mod sql;

op+ := base.op+;
op- := base.op-;
op* := base.op*;
op/ := base.op/;
int := base.int;
Unit := base.Unit;
String := base.String;
Type := base.type;

compose := (lhs: ($T) -> $U, rhs: (U) -> $V) -> (T) -> V
	=> (a: T) -> V => rhs(lhs(a));

fdsafdsa := compose(
	(a: int) -> int => a + 2,
	(a: int) -> int => a * 2);

# Monad := Struct { a: int; set: int; };
# Some  := (val: int) -> Monad => Monad { a = val; set = 1; }
# None  := () -> Monad { a = 0; set = 0; }
# 
# bind := (a: Monad, (int) -> Monad) -> Monad
# 	=> 

# cnl: channel.Channel(int) = channel.Const(2);
# 
# prnt := channel.Print { in=cnl; };

# prnt := message.Print(message.Map(
# 	message.onStart, () -> int => 2));

# conStr := "host=localhost port=5432 dbname=test user=test";
# db: Connection = sql.postgresql.connect(conStr);
# DBConnectionHandle := int;
# 
# _dbConnect := (conStr: String) -> DBConnectionHandle
# 	@nativeImpure("db_connect");
# 
# Connection := Struct {
# 	connectionString: String;
# 	handle: DBConnectionHandle = _dbConnect(connectionString);
# };
# connect := (connectionString: String) -> Connection
# 	=> Connection { connectionString = connectionString; };
# 
# query: sql.Query(int) = sql"
# 	select foo from my_table
# 	where 
# ".query(int);
# 
# stmt: sql.Statement(Unit, int) = sql"
# 	insert into my_table (foo) values ($foo)
# ".statement();

# message.onStart >>= db.exec(query);

Monad := [T: Type] Struct { val: T; };

bind := (v: Monad[$T], f: (T) -> $U) -> Monad[U]
	=> Monad[U] { val = 2; };
unit := (v: $T) -> Monad[T]
	=> Monad[T] { val = v; };

a := bind(unit(2), (a: int) -> int => a * 2);

testQuery: sql.SQL[int] = sql.sql("
	select * from foo where a = ?
");

testQuery2 := sql.sql[int]("
	select * from foo where a = ?
");



TestType := [T: Type] Struct {
	a: T;
};

TT2 := TestType[int];

prnt := message.Print(
	message.Map2(
		message.Map2(message.onStart, (a: Unit) -> int => 500),
		(a: int) -> int => a * 2));

prnt2 := message.PrintStr(
	message.Map2(message.onStart, (a: Unit) -> String => "Hello, World!"));

# con := sql.postgresql.connect("");

# asdfasdfasdf := message.msgId(message.onStart);

func_test := (base.type, int) -> int;

id := (a: $T) -> T => a;

id_test := id(2);

Foo := Struct {
	foo: int ~= 6;
	bar: int ~= 2;
	baz: int  = 3;
	sum: int  = foo + bar + baz;

	bar = 5;
};

Color := Struct {
	r: int;
	g: int;
	b: int;
};

col1 := Color { r=5; g=6; b=7; };

addFive := (a: int) -> int => a + 5;

b := addFive(1);
j := addFive(9);

c: Color;
c.r = 1;
c.g = 2;
c.b = 3;

col2 := Color { r=8; g=9; b=10; };

foobar: Foo;
foobar.foo = 3;

# b := addFive(int);
