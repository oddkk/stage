version 0.1.0;

type uint8 = int{0..255};
type dmx_address = int{0..512};

device_type dmx_out {
	attr start_address: dmx_address;
	attr num_channels: dmx_address;

	input channel: uint8[3];

	# external_output;
}

# type color = (red: uint8, green: uint8, blue: uint8);
type color = uint8[3];

device_type rgb_led {
	input color: color;
	attr start_address: dmx_address;

	device dmx_out {
		start_address = start_address;
		num_channels = 3;

		channel[0..2] <- color[0..2];
	}
}

device_type group {
	attr T: type;

	input  _: T;
	output _: T;

	_ <- _;
}

device group color_group { T = color; }

device rgb_led led1 { start_address =  0; color_group <- color; }
device rgb_led led2 { start_address =  3; color_group <- color; }
device rgb_led led3 { start_address =  6; color_group <- color; }
device rgb_led led4 { start_address =  9; color_group <- color; }
device rgb_led led5 { start_address = 12; color_group <- color; }

device_type moving_head {
	# type color_wheel = {
	# 	red, green, blue, magenta, cyan
	# };

	# input color: color_wheel;
	input pan: uint8;
	input tilt: uint8;
	input intensity: uint8;

	attr start_address: dmx_address;

	device dmx_out {
		start_address = start_address;
		num_channels = 3;

		# channel[0] = color;
		channel[0] = 0;
		channel[1] = pan;
		channel[2] = tilt;
	}
}

device_type fixture_feature {
	attr n_input: uint;
	attr T: type;
	input _: T[n_input];
	output _: T;

	device userinput _ui {}
	device first _f {
		n_input = super.n_input + 1;
		T = super.T;
	}

	_[0] <- _ui;
	_[1..n_input+1] <- _f[0..n_input];
}
