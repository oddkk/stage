Msg := @native("Msg");
# MsgTrigger := @native("MsgTrigger");
onStart := @native("onStart");

return := (val: $T) -> Msg[T]
	=> ((val: T, type: Type) -> Msg[T]
		@native("msg_monad_return"))(val, T);

# drop := () -> Msg[T]
# 	=> ((type: Type) -> Msg[T]
# 		@native("msg_monad_return")(T);

bind := (a: Msg[$T], f: (T) -> Msg[$U]) -> Msg[U]
	=> ((a: Msg[T], f: (T) -> Msg[U], In: Type, Out: Type) -> Msg[U]
		@native("msg_monad_bind"))(a, f, T, U);

filter := (in: Msg[$T], f: (T) -> Bool) -> Msg[T]
	=> bind(in, a => match f(a) {
		true => return(a);
		false => return(a);
	});

# msg := (trigger: MsgTrigger[$T], pipe: (T) -> Msg[$U]) -> Init[Unit]
# 	=> ((trg: MsgEntry[T], pipe: (T) -> Msg[$U], In: Type, Out: Type) -> Init[Unit]
# 		@native("msg_monad_trigger"))(trigger, pipe, T, U);
