int := base.int;
unit := base.unit;

# Print  := (val: int) -> Message(unit);
# Delay  := (val: $T, time: TimeDelta) -> Message(T);
# Map    := (val: $T, fun: (T) -> $U) -> Message(U);

Endpoint := (func: ($T) -> unit) -> ((Message(T)) -> unit) @nativeImpure("msg_endpoint");

_printCallback := (val: int) -> unit @nativeImpure("msg_print_int_callback");
Print := Endpoint(_printCallback);

Map := (in: Message($T), f: (T) -> $U) -> Message(U) @nativeImpure("msg_map");
