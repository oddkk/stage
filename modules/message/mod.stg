int := base.int;
unit := base.unit;

Filter;
Map;

# _printIn := (in: int) -> unit @nativeImpure("msg_print_in");
# Print := Struct {
# 	in: Message(int);
# 	_printIn(in);
# };

Print := (in: Message(int)) -> unit @nativeImpure("msg_print");

# Map := (in: Message($T), f: (T) -> $U) -> Message($U) @nativeImpure("msg_map");
Map := (in: Message(unit), f: () -> int) -> Message(int) @nativeImpure("msg_map");

# Map := (T: type, U: type) Struct {
# 	in: Message(T);
# 	f:  (T) -> U;
# 	# out := @nativeImpure("");
# };
