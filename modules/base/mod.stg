use prelude.*;

Maybe := [T: Type] variant { Some T, None };

Eq := class [$T, $U] {
	op==: (T, U) -> Bool;
	op!=: (T, U) -> Bool;
};

impl Eq[int, int] {
	op== := (a: int, b: int) -> Bool @native("op_eq_int_int");
	op!= := (a: int, b: int) -> Bool @native("op_neq_int_int");
};

op+ := (lhs: int, rhs: int) -> int @native("op_add_int_int");
op- := (lhs: int, rhs: int) -> int @native("op_sub_int_int");
op* := (lhs: int, rhs: int) -> int @native("op_mul_int_int");
op/ := (lhs: int, rhs: int) -> int @native("op_div_int_int");

ToString := class [$T] {
	toString: ($T) -> String;
};

impl ToString[String] {
	toString := (a: String) -> String => a;
};

impl ToString[int] {
	toString := (a: int) -> String
		@native("int_to_string");
};

impl ToString[Float] {
	toString := (a: Float) -> String
		@native("float_to_string");
};

impl ToString[Bool] {
	toString := (a: Bool) -> String
		=> match a {
			true => "true";
			false => "false";
		};
};

id := (a: $T) -> T => a;

compose := (lhs: ($T) -> $U, rhs: (U) -> $V) -> (T) -> V
	=> (a: T) -> V => rhs(lhs(a));

concat := (l: String, r: String) -> String
	@native("stg_string_concat");
