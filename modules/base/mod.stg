Bool := Variant { True, False };
Maby := [T: Type] Variant { Some T, None };

op+ := (lhs: int, rhs: int) -> int @native("op_add_int_int");
op- := (lhs: int, rhs: int) -> int @native("op_sub_int_int");
op* := (lhs: int, rhs: int) -> int @native("op_mul_int_int");
op/ := (lhs: int, rhs: int) -> int @native("op_div_int_int");

print := (val: int) -> Unit @native("print_int");

id := (a: $T) -> T => a;

compose := (lhs: ($T) -> $U, rhs: (U) -> $V) -> (T) -> V
	=> (a: T) -> V => rhs(lhs(a));
