use mod base;
use mod base.io.*;
use mod base.list.List;

mod message;

DBConnectionHandle := int;

_dbConnect := (kind: String, conStr: String) -> IO[DBConnectionHandle]
	@native("sql_db_connect");

Connection := struct {
	dbKind: String;
	connectionString: String;
	_handle: DBConnectionHandle;
};

query := (db: Connection, q: String, args: List[String]) -> IO[List[List[String]]]
	=> ((db: DBConnectionHandle, query: String, args: List[String]) -> IO[List[List[String]]]
		@native("sql_db_query"))(db._handle, q, args);


# SQLFragmentPart := Variant {
# 	frag String,
# 	var int,
# };
#
# SQLFragmentVar := struct {
# 	id: int;
# 	sqlType: base.Maybe[String];
# 	value: String;
# };
#
# SQLFragment := struct {
# 	parts: List[SQLFragmentPart];
# 	vars:  List[SQLFragmentVar];
# 	nextVar: int;
# };
#
# SQLType := class [$T] {
# 	toSQLString: (T) -> String;
# 	fromSQLString: (String) -> T;
# 	# typeName: base.Maybe[String];
# };

# SQLFrag := class [$T] {
# 	cons: (T, SQLFragment) -> SQLFragment;
# };
#
# impl SQLFrag[$T] + SQLType[T] {
# 	cons := (var: T, tail: SQLFragment) -> SQLFragment
# 		=> SQLFragment {
# 			parts = cons[](, tail.
# 		};
# };

# impl SQLFrag[SQLFragment] {
# };

# impl SQLType[int] {
# 	toSQLString := base.ToString[int].toString;
# 	fromSQLString := (a: String) -> int => 0; # TODO
# 	# typeName := base.Maybe[String].Some("integer");
# };
#
# impl SQLType[String] {
# 	toSQLString := base.id[String];
# 	fromSQLString := base.id[String]; # TODO
# 	# typeName := base.Maybe[String].Some("text");
# };

# SQLQuery := struct {
# 	stmt: String;
# 	params: List[String];
# };

# query := (db: Connection, q: SQLQuery) -> IO[List[$U]]
# 	=> ((db: DBConnectionHandle,
# 		query: String,
# 		paramType: Type,
# 		resultType: Type) -> IO[U]
# 			@native("sql_db_query"))(db._handle, q.stmt, T, U);

# transact := (db: Connection, ) -> IO[List[$U]]
# 	=> ...;
